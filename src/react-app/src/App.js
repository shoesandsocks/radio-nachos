import React, { useEffect, useState } from "react";
import renderFormLine from "./helpers/renderFormLine";
function App() {
  const [numberOfTracks, setNumberOfTracks] = useState(20);
  const [submission, setSubmission] = useState([["", 100, ""]]); // id, %age, name (generated by func)
  const [prevs, setPrevs] = useState({ playlists: [], compositions: [] });
  const [globalError, setGlobalError] = useState("");

  useEffect(() => {
    fetch("/getPrev")
      .then((x) => x.json())
      .then((json) => setPrevs(json))
      .catch((e) => {
        console.log(e);
        // const url = new URL(window.location.href);
        // alert(JSON.stringify(url), "You're not logged in to Spotify");
        // return (window.location.href = url.origin);
      });
  }, []);
  const handleLookup = (str, num) => {
    fetch("/playlistlookup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ str }),
    })
      .then((r) => r.json())
      .then(({ error, name }) => {
        console.log(error);
        const newSub = [...submission];
        newSub[num][2] = name ? name : "";
        return setSubmission(newSub);
      })
      .catch((e) => console.log(e));
  };
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name === "tracks") setNumberOfTracks(value);
    if (name.match(/^playlist/)) {
      const num = name.replace("playlist", "").toString();
      const newSub = [...submission];
      newSub[num][0] = value;
      // setSubmission(newSub);
      if (value.match(/^spotify:playlist:[a-zA-Z0-9]{22}$/)) {
        handleLookup(value, num);
      } else {
        newSub[num][2] = "";
        setSubmission(newSub);
      }
      return;
    }
    if (name.match(/^percent/)) {
      const num = name.replace("percent", "").toString();
      const newSub = [...submission];
      newSub[num][1] = value;
      setSubmission(newSub);
    }
  };
  const addFormLine = (e) => {
    const newSub = [...submission];
    newSub.push(["", 0]);
    setSubmission(newSub);
  };
  const removeFormLine = (e) => {
    const newSub = submission.filter(
      (_, index) => index !== Number(e.target.value)
    );
    setSubmission(newSub);
  };
  const calcTotal = (submission) =>
    submission.reduce((acc, curr) => acc + Number(curr[1]), 0);
  const handleSubmit = (e) => {
    e.preventDefault();
    if (calcTotal(submission) !== 100) {
      setTimeout(() => setGlobalError(""), 7000);
      return setGlobalError("C'mon. That's not 100%, Brad.");
    }
    const bort = submission.map((s) => s[2]);
    if (bort.includes("")) {
      setTimeout(() => setGlobalError(""), 7000);
      return setGlobalError("Missing a valid playlist there?");
    }
    fetch("/make", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        arrayOfArrays: submission,
        numberOfTracks,
      }),
    })
      .then((r) => r.json())
      .then((json) => {
        const { listId, timestamp, error } = json;
        if (error) return alert(error);
        const url = new URL(window.location.href);
        return (window.location.href = `${url.origin}/radio?listId=${listId}&timestamp=${timestamp}`);
      })
      .catch((e) => {
        console.log(e);
      });
  };

  const populateForm = (e) => {
    const composition = JSON.parse(e.target.dataset.composition);
    const { tracks } = e.target.dataset;
    const newSub = composition.map((comp) => [
      comp.playlistId,
      comp.percentage,
      comp.playlistName,
    ]);
    setSubmission(newSub);
    setNumberOfTracks(tracks);
    window.scrollTo(0, 0);
  };
  const deletePlaylist = (e) => {
    const { id } = e.target;
    const idToDelete = id.replace("playlist-", "");
    fetch("/deletePlaylist", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ idToDelete }),
    })
      .then((r) => {
        if (r.status === 200) {
          window.location.reload();
        } else {
          alert(`Something went wrong. Server status: ${r.status}`);
        }
      })
      .catch((e) => {
        alert(`Something went wrong. ${JSON.stringify(e)}`);
      });
  };
  const makePrevPlaylists = ({ playlists, compositions }) =>
    playlists.map((pL) => {
      const { id } = pL;
      const timestring = +pL.name.split("-")[2]; // the part after radio-nachos-
      const timestamp = new Date(timestring);
      const composition = compositions.filter(
        (comp) => comp.timestamp === timestring.toString()
      )[0];
      const options = {
        weekday: "long",
        year: "numeric",
        month: "short",
        day: "numeric",
      };
      const displayDate = `${timestamp.toLocaleTimeString()}, ${timestamp.toLocaleDateString(
        "en-US",
        options
      )}`;
      if (composition !== undefined) {
        const { compositionData, numberOfTracks } = composition;
        return (
          <li key={id} className="playlist-entry-wrap">
            <a href={`/radio?timestamp=${timestring}&listId=${id}`}>
              <img
                src={`${pL.images[1].url}`}
                alt="playlist graphic from spotify"
              />
              <p>
                {displayDate} - {numberOfTracks} songs
              </p>
            </a>
            {compositionData.map((compo) => (
              <p key={compo.playlistId} className="one-playlist-line">
                {compo.playlistName} ({compo.playlistId})
                <span>{compo.percentage}%</span>
              </p>
            ))}
            <div className="playlist-buttons">
              <button
                className="make-another-btn"
                data-composition={JSON.stringify(compositionData)}
                data-tracks={numberOfTracks}
                onClick={populateForm}
              >
                Set up a similar playlist
              </button>
              <button
                onClick={deletePlaylist}
                className="delete-playlist-btn"
                id={`playlist-${id}`}
              >
                delete this playlist
              </button>
            </div>
            `
          </li>
        );
      } else {
        return (
          <li className="playlist-entry-wrap">
            <a href={`/radio?timestamp=${timestring}&listId=${id}`}>
              <img
                src={`${pL.images[1].url}`}
                alt="playlist graphic from spotify"
              />
              <p>${displayDate}</p>
            </a>
          </li>
        );
      }
    });

  return (
    <div className="App">
      <h1>radio nachos playmaker</h1>
      <form id="creator-form">
        <fieldset id="fieldset">
          <div id="all-entries">
            {submission.map((array, index) =>
              renderFormLine(
                index,
                array,
                handleInputChange,
                addFormLine,
                removeFormLine,
                index === submission.length - 1,
                submission.length === 1
              )
            )}
          </div>
          <p id="total">{calcTotal(submission)}</p>
          <p id="currentVal">{numberOfTracks}</p>

          <label htmlFor="tracks">how many tracks? (10 - 99)</label>
          <br />
          <input
            type="range"
            id="tracks-input"
            name="tracks"
            value={numberOfTracks}
            min="10"
            max="99"
            step="1"
            onChange={handleInputChange}
          />
          <br />
          <div id="count-and-button">
            <span id="global-error">{globalError}</span>
            <button id="submit-btn" type="submit" onClick={handleSubmit}>
              create playlist
            </button>
          </div>
        </fieldset>
      </form>

      <h2>Previous playlists</h2>
      <ul id="previous">
        {!prevs.playlists.length && (
          <li>
            <p id="nope">you have no previous playlists</p>
          </li>
        )}
        {makePrevPlaylists(prevs)}
      </ul>
    </div>
  );
}

export default App;
