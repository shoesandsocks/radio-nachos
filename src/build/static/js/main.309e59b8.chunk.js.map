{"version":3,"sources":["App.js","helpers/handleLookup.js","helpers/renderFormLine.js","helpers/makePrevPlaylists.js","serviceWorker.js","index.js"],"names":["App","useState","numberOfTracks","setNumberOfTracks","submission","setSubmission","playlists","compositions","prevs","setPrevs","globalError","setGlobalError","isCreating","setIsCreating","useEffect","fetch","then","x","json","catch","e","console","log","displayError","msg","setTimeout","handleInputChange","target","name","value","match","num","replace","toString","newSub","str","method","headers","body","JSON","stringify","r","error","handleLookup","addFormLine","push","removeFormLine","filter","_","index","Number","calcTotal","reduce","acc","curr","className","id","map","array","isLast","isOnly","key","htmlFor","type","data-lpignore","required","placeholder","onChange","min","max","step","onClick","renderFormLine","length","preventDefault","s","includes","arrayOfArrays","listId","timestamp","url","URL","window","location","href","origin","disabled","populateForm","composition","parse","dataset","tracks","comp","playlistId","percentage","playlistName","scrollTo","top","left","behavior","deletePlaylist","idToDelete","status","reload","alert","pL","timestring","split","Date","image","images","displayDate","toLocaleTimeString","toLocaleDateString","weekday","year","month","day","undefined","compositionData","src","alt","compo","data-composition","data-tracks","er","makePrevPlaylists","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.309e59b8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport renderFormLine from \"./helpers/renderFormLine\";\nimport makePrevPlaylists from \"./helpers/makePrevPlaylists\";\nimport handleLookup from \"./helpers/handleLookup\";\n\nfunction App() {\n  const [numberOfTracks, setNumberOfTracks] = useState(20);\n  const [submission, setSubmission] = useState([[\"\", 100, \"\"]]); // id, %age, name (generated by func)\n  const [prevs, setPrevs] = useState({ playlists: [], compositions: [] });\n  const [globalError, setGlobalError] = useState(\"\");\n  const [isCreating, setIsCreating] = useState(false);\n\n  useEffect(() => {\n    fetch(\"/getPrev\")\n      .then((x) => x.json())\n      .then((json) => setPrevs(json))\n      .catch((e) => {\n        console.log(e);\n        return displayError(\"Error. Are you logged in?\");\n        // const url = new URL(window.location.href);\n        // alert(JSON.stringify(url), \"You're not logged in to Spotify\");\n        // return (window.location.href = url.origin);\n      });\n  }, []);\n\n  const displayError = (msg) => {\n    setIsCreating(false);\n    setTimeout(() => setGlobalError(\"\"), 7000);\n    return setGlobalError(msg);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"tracks\") setNumberOfTracks(value);\n    if (name.match(/^playlist/)) {\n      const num = name.replace(\"playlist\", \"\").toString();\n      const newSub = [...submission];\n      newSub[num][0] = value;\n      // setSubmission(newSub);\n      if (value.match(/^spotify:playlist:[a-zA-Z0-9]{22}$/)) {\n        handleLookup(value, num, submission, setSubmission, displayError);\n      } else {\n        newSub[num][2] = \"\";\n        setSubmission(newSub);\n      }\n      return;\n    }\n    if (name.match(/^percent/)) {\n      const num = name.replace(\"percent\", \"\").toString();\n      const newSub = [...submission];\n      newSub[num][1] = value;\n      setSubmission(newSub);\n    }\n  };\n  const addFormLine = (e) => {\n    const newSub = [...submission];\n    newSub.push([\"\", 0]);\n    setSubmission(newSub);\n  };\n  const removeFormLine = (e) => {\n    const newSub = submission.filter(\n      (_, index) => index !== Number(e.target.value)\n    );\n    setSubmission(newSub);\n  };\n\n  const calcTotal = (submission) =>\n    submission.reduce((acc, curr) => acc + Number(curr[1]), 0);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsCreating(true);\n    if (calcTotal(submission) !== 100) {\n      return displayError(\"C'mon. That's not 100%, Brad.\");\n    }\n    const allPlaylistNames = submission.map((s) => s[2]);\n    if (allPlaylistNames.includes(\"\")) {\n      return displayError(\"Missing a valid playlist there?\");\n    }\n    fetch(\"/make\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        arrayOfArrays: submission,\n        numberOfTracks,\n      }),\n    })\n      .then((r) => r.json())\n      .then((json) => {\n        const { listId, timestamp, error } = json;\n        if (error) {\n          return displayError(error);\n        }\n        const url = new URL(window.location.href);\n        return (window.location.href = `${url.origin}/radio?listId=${listId}&timestamp=${timestamp}`);\n      })\n      .catch((e) => {\n        console.log(e);\n        return displayError(\"Serious failure; sorry.\");\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>radio nachos playmaker</h1>\n      <form id=\"creator-form\">\n        <fieldset id=\"fieldset\">\n          <div id=\"all-entries\">\n            {submission.map((array, index) =>\n              renderFormLine(\n                index,\n                array,\n                handleInputChange,\n                addFormLine,\n                removeFormLine,\n                index === submission.length - 1,\n                submission.length === 1\n              )\n            )}\n          </div>\n          <p id=\"total\">{calcTotal(submission)}</p>\n          <p id=\"currentVal\">{numberOfTracks}</p>\n\n          <label htmlFor=\"tracks\">how many tracks? (10 - 99)</label>\n          <br />\n          <input\n            type=\"range\"\n            id=\"tracks-input\"\n            name=\"tracks\"\n            value={numberOfTracks}\n            min=\"10\"\n            max=\"99\"\n            step=\"1\"\n            onChange={handleInputChange}\n          />\n          <br />\n          <div id=\"count-and-button\">\n            <span id=\"global-error\">{globalError}</span>\n            <button\n              id=\"submit-btn\"\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={isCreating}\n            >\n              {isCreating ? \"~ ~ ~ ~ ~ ~\" : \"create playlist\"}\n            </button>\n          </div>\n        </fieldset>\n      </form>\n\n      <h2>Previous playlists</h2>\n      <ul id=\"previous\">\n        {!prevs.playlists.length && (\n          <li>\n            <p id=\"nope\">you have no previous playlists</p>\n          </li>\n        )}\n        {makePrevPlaylists(prevs, setSubmission, setNumberOfTracks)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","export default (str, num, submission, setSubmission, displayError) => {\n  fetch(\"/playlistlookup\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ str }),\n  })\n    .then((r) => r.json())\n    .then(({ error, name }) => {\n      displayError(error);\n      const newSub = [...submission];\n      newSub[num][2] = name ? name : \"\";\n      return setSubmission(newSub);\n    })\n    .catch((e) => displayError(\"Lookup failed. Are you logged in?\"));\n};\n","import React from \"react\";\n\nexport default function (\n  num,\n  array,\n  handleInputChange,\n  addFormLine,\n  removeFormLine,\n  isLast = false,\n  isOnly = true\n) {\n  // console.log(num, array);\n  return (\n    <div key={num}>\n      <div className=\"above-entry-wrap\">\n        <p className=\"label-spacer\"></p>\n        <p className=\"playlist-name-lookup\" id=\"playlist1-name-lookup\">\n          {array[2]}\n        </p>\n      </div>\n      <div className=\"one-entry-wrap\">\n        <label htmlFor={`playlist${num}`}>playlist ID</label>\n        <input\n          type=\"text\"\n          name={`playlist${num}`}\n          id={`playlist${num}`}\n          className=\"playlist-id\"\n          data-lpignore=\"true\"\n          required\n          placeholder=\"spotify:playlist:37i9dQZF1DZ06evO05tE88\"\n          value={array[0]}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"number\"\n          className=\"percentage\"\n          id={`percent${num}`}\n          name={`percent${num}`}\n          value={array[1]}\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          onChange={handleInputChange}\n        />\n        <label htmlFor={`percent${num}`}>%</label>\n        <button\n          type=\"button\"\n          className={`add-entry-button ${!isLast ? \"visually-hidden\" : \"\"}`}\n          id={`add-entry-button-${num}`}\n          value={num}\n          onClick={addFormLine}\n        >\n          add more\n        </button>\n\n        {!isOnly && (\n          <button\n            type=\"button\"\n            className=\"remove-entry-button\"\n            id={`remove-entry-button-${num}`}\n            value={num}\n            onClick={removeFormLine}\n          >\n            remove this\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default (prevs, setSubmission, setNumberOfTracks) => {\n  const populateForm = (e) => {\n    const composition = JSON.parse(e.target.dataset.composition);\n    const { tracks } = e.target.dataset;\n    const newSub = composition.map((comp) => [\n      comp.playlistId,\n      comp.percentage,\n      comp.playlistName,\n    ]);\n    setSubmission(newSub);\n    setNumberOfTracks(tracks);\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\",\n    });\n  };\n  const deletePlaylist = (e) => {\n    const { id } = e.target;\n    const idToDelete = id.replace(\"playlist-\", \"\");\n    fetch(\"/deletePlaylist\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ idToDelete }),\n    })\n      .then((r) => {\n        if (r.status === 200) {\n          window.location.reload();\n        } else {\n          alert(`Something went wrong. Server status: ${r.status}`);\n        }\n      })\n      .catch((e) => {\n        alert(`Something went wrong. ${JSON.stringify(e)}`);\n      });\n  };\n\n  try {\n    const { playlists, compositions } = prevs;\n    return playlists.map((pL) => {\n      const { id } = pL;\n      const timestring = +pL.name.split(\"-\")[2]; // the part after radio-nachos-\n      const timestamp = new Date(timestring);\n      let image = \"https://www.porknachos.com/files/naviavi.jpg\";\n      if (pL.images && pL.images.length > 1) {\n        image = pL.images[1].url;\n      }\n\n      const composition = compositions.filter(\n        (comp) => comp.timestamp === timestring.toString()\n      )[0];\n      const options = {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      };\n      const displayDate = `${timestamp.toLocaleTimeString()}, ${timestamp.toLocaleDateString(\n        \"en-US\",\n        options\n      )}`;\n      if (composition !== undefined) {\n        const { compositionData, numberOfTracks } = composition;\n        if (!numberOfTracks || numberOfTracks < 1) {\n          return (\n            <li key={id} className=\"playlist-entry-wrap\">\n              <a href={`/radio?timestamp=${timestring}&listId=${id}`}>\n                <img src={image} alt=\"playlist graphic from spotify\" />\n                <p>An empty playlist</p>\n              </a>\n              <div className=\"playlist-buttons\">\n                <div>&nbsp;</div>\n                <button\n                  onClick={deletePlaylist}\n                  className=\"delete-playlist-btn\"\n                  id={`playlist-${id}`}\n                >\n                  delete this playlist\n                </button>\n              </div>\n              `\n            </li>\n          );\n        }\n        return (\n          <li key={id} className=\"playlist-entry-wrap\">\n            <a href={`/radio?timestamp=${timestring}&listId=${id}`}>\n              <img src={image} alt=\"playlist graphic from spotify\" />\n              <p>\n                {displayDate} - {numberOfTracks} songs\n              </p>\n            </a>\n            {compositionData.map((compo) => (\n              <p key={compo.playlistId} className=\"one-playlist-line\">\n                {compo.playlistName} ({compo.playlistId})\n                <span>{compo.percentage}%</span>\n              </p>\n            ))}\n            <div className=\"playlist-buttons\">\n              <button\n                className=\"make-another-btn\"\n                data-composition={JSON.stringify(compositionData)}\n                data-tracks={numberOfTracks}\n                onClick={populateForm}\n              >\n                Set up a similar playlist\n              </button>\n              <button\n                onClick={deletePlaylist}\n                className=\"delete-playlist-btn\"\n                id={`playlist-${id}`}\n              >\n                delete this playlist\n              </button>\n            </div>\n            `\n          </li>\n        );\n      } else {\n        return (\n          <li className=\"playlist-entry-wrap\">\n            <a href={`/radio?timestamp=${timestring}&listId=${id}`}>\n              <img\n                src={`${pL.images[1].url}`}\n                alt=\"playlist graphic from spotify\"\n              />\n              <p>${displayDate}</p>\n            </a>\n          </li>\n        );\n      }\n    });\n  } catch (er) {\n    console.log(er, \"error mapping playlists\");\n    return (\n      <a href=\"/\">Something failed catastrophically. Try logging in again.</a>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}