{"version":3,"sources":["App.js","helpers/renderFormLine.js","serviceWorker.js","index.js"],"names":["App","useState","numberOfTracks","setNumberOfTracks","submission","setSubmission","playlists","compositions","prevs","setPrevs","globalError","setGlobalError","isCreating","setIsCreating","useEffect","fetch","then","x","json","catch","e","console","log","handleInputChange","target","name","value","match","num","replace","toString","newSub","str","method","headers","body","JSON","stringify","r","error","handleLookup","addFormLine","push","removeFormLine","filter","_","index","Number","calcTotal","reduce","acc","curr","populateForm","composition","parse","dataset","tracks","map","comp","playlistId","percentage","playlistName","window","scrollTo","top","left","behavior","deletePlaylist","idToDelete","id","status","location","reload","alert","className","array","isLast","isOnly","key","htmlFor","type","data-lpignore","required","placeholder","onChange","min","max","step","onClick","renderFormLine","length","preventDefault","setTimeout","s","includes","arrayOfArrays","listId","timestamp","url","URL","href","origin","disabled","pL","timestring","split","Date","displayDate","toLocaleTimeString","toLocaleDateString","weekday","year","month","day","undefined","compositionData","src","images","alt","compo","data-composition","data-tracks","makePrevPlaylists","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.50e79d0d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport renderFormLine from \"./helpers/renderFormLine\";\nfunction App() {\n  const [numberOfTracks, setNumberOfTracks] = useState(20);\n  const [submission, setSubmission] = useState([[\"\", 100, \"\"]]); // id, %age, name (generated by func)\n  const [prevs, setPrevs] = useState({ playlists: [], compositions: [] });\n  const [globalError, setGlobalError] = useState(\"\");\n  const [isCreating, setIsCreating] = useState(false);\n\n  useEffect(() => {\n    fetch(\"/getPrev\")\n      .then((x) => x.json())\n      .then((json) => setPrevs(json))\n      .catch((e) => {\n        console.log(e);\n        // const url = new URL(window.location.href);\n        // alert(JSON.stringify(url), \"You're not logged in to Spotify\");\n        // return (window.location.href = url.origin);\n      });\n  }, []);\n  const handleLookup = (str, num) => {\n    fetch(\"/playlistlookup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ str }),\n    })\n      .then((r) => r.json())\n      .then(({ error, name }) => {\n        console.log(error);\n        const newSub = [...submission];\n        newSub[num][2] = name ? name : \"\";\n        return setSubmission(newSub);\n      })\n      .catch((e) => console.log(e));\n  };\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"tracks\") setNumberOfTracks(value);\n    if (name.match(/^playlist/)) {\n      const num = name.replace(\"playlist\", \"\").toString();\n      const newSub = [...submission];\n      newSub[num][0] = value;\n      // setSubmission(newSub);\n      if (value.match(/^spotify:playlist:[a-zA-Z0-9]{22}$/)) {\n        handleLookup(value, num);\n      } else {\n        newSub[num][2] = \"\";\n        setSubmission(newSub);\n      }\n      return;\n    }\n    if (name.match(/^percent/)) {\n      const num = name.replace(\"percent\", \"\").toString();\n      const newSub = [...submission];\n      newSub[num][1] = value;\n      setSubmission(newSub);\n    }\n  };\n  const addFormLine = (e) => {\n    const newSub = [...submission];\n    newSub.push([\"\", 0]);\n    setSubmission(newSub);\n  };\n  const removeFormLine = (e) => {\n    const newSub = submission.filter(\n      (_, index) => index !== Number(e.target.value)\n    );\n    setSubmission(newSub);\n  };\n  const calcTotal = (submission) =>\n    submission.reduce((acc, curr) => acc + Number(curr[1]), 0);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsCreating(true);\n    if (calcTotal(submission) !== 100) {\n      setTimeout(() => setGlobalError(\"\"), 7000);\n      return setGlobalError(\"C'mon. That's not 100%, Brad.\");\n    }\n    const bort = submission.map((s) => s[2]);\n    if (bort.includes(\"\")) {\n      setTimeout(() => setGlobalError(\"\"), 7000);\n      return setGlobalError(\"Missing a valid playlist there?\");\n    }\n    fetch(\"/make\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        arrayOfArrays: submission,\n        numberOfTracks,\n      }),\n    })\n      .then((r) => r.json())\n      .then((json) => {\n        const { listId, timestamp, error } = json;\n        if (error) return alert(error);\n        const url = new URL(window.location.href);\n        return (window.location.href = `${url.origin}/radio?listId=${listId}&timestamp=${timestamp}`);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const populateForm = (e) => {\n    const composition = JSON.parse(e.target.dataset.composition);\n    const { tracks } = e.target.dataset;\n    const newSub = composition.map((comp) => [\n      comp.playlistId,\n      comp.percentage,\n      comp.playlistName,\n    ]);\n    setSubmission(newSub);\n    setNumberOfTracks(tracks);\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\",\n    });\n  };\n  const deletePlaylist = (e) => {\n    const { id } = e.target;\n    const idToDelete = id.replace(\"playlist-\", \"\");\n    fetch(\"/deletePlaylist\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ idToDelete }),\n    })\n      .then((r) => {\n        if (r.status === 200) {\n          window.location.reload();\n        } else {\n          alert(`Something went wrong. Server status: ${r.status}`);\n        }\n      })\n      .catch((e) => {\n        alert(`Something went wrong. ${JSON.stringify(e)}`);\n      });\n  };\n  const makePrevPlaylists = ({ playlists, compositions }) =>\n    playlists.map((pL) => {\n      const { id } = pL;\n      const timestring = +pL.name.split(\"-\")[2]; // the part after radio-nachos-\n      const timestamp = new Date(timestring);\n      const composition = compositions.filter(\n        (comp) => comp.timestamp === timestring.toString()\n      )[0];\n      const options = {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      };\n      const displayDate = `${timestamp.toLocaleTimeString()}, ${timestamp.toLocaleDateString(\n        \"en-US\",\n        options\n      )}`;\n      if (composition !== undefined) {\n        const { compositionData, numberOfTracks } = composition;\n        return (\n          <li key={id} className=\"playlist-entry-wrap\">\n            <a href={`/radio?timestamp=${timestring}&listId=${id}`}>\n              <img\n                src={`${pL.images[1].url}`}\n                alt=\"playlist graphic from spotify\"\n              />\n              <p>\n                {displayDate} - {numberOfTracks} songs\n              </p>\n            </a>\n            {compositionData.map((compo) => (\n              <p key={compo.playlistId} className=\"one-playlist-line\">\n                {compo.playlistName} ({compo.playlistId})\n                <span>{compo.percentage}%</span>\n              </p>\n            ))}\n            <div className=\"playlist-buttons\">\n              <button\n                className=\"make-another-btn\"\n                data-composition={JSON.stringify(compositionData)}\n                data-tracks={numberOfTracks}\n                onClick={populateForm}\n              >\n                Set up a similar playlist\n              </button>\n              <button\n                onClick={deletePlaylist}\n                className=\"delete-playlist-btn\"\n                id={`playlist-${id}`}\n              >\n                delete this playlist\n              </button>\n            </div>\n            `\n          </li>\n        );\n      } else {\n        return (\n          <li className=\"playlist-entry-wrap\">\n            <a href={`/radio?timestamp=${timestring}&listId=${id}`}>\n              <img\n                src={`${pL.images[1].url}`}\n                alt=\"playlist graphic from spotify\"\n              />\n              <p>${displayDate}</p>\n            </a>\n          </li>\n        );\n      }\n    });\n\n  return (\n    <div className=\"App\">\n      <h1>radio nachos playmaker</h1>\n      <form id=\"creator-form\">\n        <fieldset id=\"fieldset\">\n          <div id=\"all-entries\">\n            {submission.map((array, index) =>\n              renderFormLine(\n                index,\n                array,\n                handleInputChange,\n                addFormLine,\n                removeFormLine,\n                index === submission.length - 1,\n                submission.length === 1\n              )\n            )}\n          </div>\n          <p id=\"total\">{calcTotal(submission)}</p>\n          <p id=\"currentVal\">{numberOfTracks}</p>\n\n          <label htmlFor=\"tracks\">how many tracks? (10 - 99)</label>\n          <br />\n          <input\n            type=\"range\"\n            id=\"tracks-input\"\n            name=\"tracks\"\n            value={numberOfTracks}\n            min=\"10\"\n            max=\"99\"\n            step=\"1\"\n            onChange={handleInputChange}\n          />\n          <br />\n          <div id=\"count-and-button\">\n            <span id=\"global-error\">{globalError}</span>\n            <button\n              id=\"submit-btn\"\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={isCreating}\n            >\n              {isCreating ? \"~ ~ ~ ~ ~ ~\" : \"create playlist\"}\n            </button>\n          </div>\n        </fieldset>\n      </form>\n\n      <h2>Previous playlists</h2>\n      <ul id=\"previous\">\n        {!prevs.playlists.length && (\n          <li>\n            <p id=\"nope\">you have no previous playlists</p>\n          </li>\n        )}\n        {makePrevPlaylists(prevs)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nexport default function (\n  num,\n  array,\n  handleInputChange,\n  addFormLine,\n  removeFormLine,\n  isLast = false,\n  isOnly = true\n) {\n  // console.log(num, array);\n  return (\n    <div key={num}>\n      <div className=\"above-entry-wrap\">\n        <p className=\"label-spacer\"></p>\n        <p className=\"playlist-name-lookup\" id=\"playlist1-name-lookup\">\n          {array[2]}\n        </p>\n      </div>\n      <div className=\"one-entry-wrap\">\n        <label htmlFor={`playlist${num}`}>playlist ID</label>\n        <input\n          type=\"text\"\n          name={`playlist${num}`}\n          id={`playlist${num}`}\n          className=\"playlist-id\"\n          data-lpignore=\"true\"\n          required\n          placeholder=\"spotify:playlist:37i9dQZF1DZ06evO05tE88\"\n          value={array[0]}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"number\"\n          className=\"percentage\"\n          id={`percent${num}`}\n          name={`percent${num}`}\n          value={array[1]}\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          onChange={handleInputChange}\n        />\n        <label htmlFor={`percent${num}`}>%</label>\n        <button\n          type=\"button\"\n          className={`add-entry-button ${!isLast ? \"visually-hidden\" : \"\"}`}\n          id={`add-entry-button-${num}`}\n          value={num}\n          onClick={addFormLine}\n        >\n          add more\n        </button>\n\n        {!isOnly && (\n          <button\n            type=\"button\"\n            className=\"remove-entry-button\"\n            id={`remove-entry-button-${num}`}\n            value={num}\n            onClick={removeFormLine}\n          >\n            remove this\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}